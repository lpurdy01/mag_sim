#!/usr/bin/env python3
"""Plot the validation line profile produced by analytic_wire_test.

This script reads the CSV written to ``outputs/validation_wire_line.csv`` and
produces a simple plot of magnetic flux density magnitude along the horizontal
centerline. It requires ``numpy`` and ``matplotlib``. Usage::

    python -m pip install numpy matplotlib
    python python/visualize_wire.py

The plot is displayed on screen and optionally saved as PNG when ``--save`` is
provided.
"""

from __future__ import annotations

import argparse
import csv
import pathlib
from typing import List

import matplotlib.pyplot as plt
import numpy as np


def read_profile(path: pathlib.Path) -> tuple[np.ndarray, np.ndarray, np.ndarray]:
    """Load x, y, and magnitude columns from a CSV file."""

    xs: List[float] = []
    ys: List[float] = []
    vals: List[float] = []

    with path.open("r", encoding="utf-8") as f:
        reader = csv.DictReader(f)
        for row in reader:
            xs.append(float(row["x"]))
            ys.append(float(row["y"]))
            vals.append(float(row["value"]))

    return np.asarray(xs), np.asarray(ys), np.asarray(vals)


def plot_profile(xs: np.ndarray, vals: np.ndarray, save: pathlib.Path | None) -> None:
    """Display the B-field magnitude profile and optionally save to disk."""

    fig, ax = plt.subplots(figsize=(8, 4))
    ax.plot(xs, vals, marker="o", linestyle="-", label="|B| numerical")
    ax.set_xlabel("x [m]")
    ax.set_ylabel("|B| [T]")
    ax.set_title("Infinite wire validation line profile")
    ax.grid(True, which="both", linestyle="--", alpha=0.5)
    ax.legend()

    if save is not None:
        fig.savefig(save, dpi=200, bbox_inches="tight")
        print(f"Saved figure to {save}")

    plt.show()


def main() -> None:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "--csv",
        type=pathlib.Path,
        default=pathlib.Path("outputs/validation_wire_line.csv"),
        help="Path to the CSV line profile generated by the C++ test.",
    )
    parser.add_argument(
        "--save",
        type=pathlib.Path,
        default=None,
        help="Optional output path to save the plot as PNG.",
    )
    args = parser.parse_args()

    if not args.csv.exists():
        raise SystemExit(f"CSV file not found: {args.csv} â€” run analytic_wire_test first.")

    xs, _ys, vals = read_profile(args.csv)
    plot_profile(xs, vals, args.save)


if __name__ == "__main__":
    main()
