#!/usr/bin/env python3
"""Render a rotor/stator animation from mechanical traces and circuit currents."""

from __future__ import annotations

import argparse
import json
from pathlib import Path
from typing import Dict, Optional

import numpy as np

from rotor_animation import (
    MechanicalSeries,
    ScenarioData,
    build_slot_signal,
    extract_timeline_angles,
    load_circuit_trace,
    load_mechanical_trace,
    load_scenario,
    render_animation,
)


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("--scenario", required=True, type=Path, help="Scenario JSON describing the geometry")
    parser.add_argument("--rotor", default=None, help="Rotor name to animate (defaults to first rotor in scenario)")
    parser.add_argument(
        "--mechanical",
        type=Path,
        help="Mechanical trace CSV generated by the solver (time_s, angle_deg, omega_rad_s, ...)",
    )
    parser.add_argument(
        "--mechanical-rotor",
        default=None,
        help="Rotor name used inside the mechanical trace (defaults to --rotor)",
    )
    parser.add_argument(
        "--circuit-trace",
        type=Path,
        help="Circuit trace CSV (time_s,circuit,coil,region,turns,orientation,current_A,...)",
    )
    parser.add_argument("--gif", dest="gif_path", type=Path, help="Output GIF path")
    parser.add_argument("--frame-png", dest="png_path", type=Path, help="Optional PNG snapshot path")
    parser.add_argument("--fps", type=int, default=12, help="Animation frame rate for the GIF writer")
    parser.add_argument("--dpi", type=int, default=200, help="PNG export DPI")
    parser.add_argument("--max-frames", type=int, default=None, help="Limit the number of frames rendered")
    parser.add_argument(
        "--no-timeline-phase",
        action="store_true",
        help="Disable fallback to scenario phase_currents when no circuit trace is provided",
    )
    parser.add_argument(
        "--figsize",
        type=float,
        nargs=2,
        metavar=("WIDTH", "HEIGHT"),
        default=(6.5, 6.5),
        help="Matplotlib figure size in inches",
    )
    return parser.parse_args()


def main() -> None:
    args = parse_args()

    if not args.scenario.exists():
        raise SystemExit(f"Scenario '{args.scenario}' not found")

    raw_data = json.loads(args.scenario.read_text(encoding="utf-8"))
    rotor_name = args.rotor
    if rotor_name is None:
        rotor_name = next((rotor.get("name") for rotor in raw_data.get("rotors", []) if isinstance(rotor, dict)), None)
    if rotor_name is None:
        raise SystemExit("Scenario does not define any rotors; specify --rotor explicitly")

    scenario: ScenarioData = load_scenario(args.scenario, rotor_name)

    mechanical_series = None
    if args.mechanical is not None:
        if not args.mechanical.exists():
            raise SystemExit(f"Mechanical trace '{args.mechanical}' not found")
        mechanical_name = args.mechanical_rotor or rotor_name
        mechanical_series = load_mechanical_trace(args.mechanical, mechanical_name)
    else:
        mechanical_series = extract_timeline_angles(scenario, raw_data, rotor_name)
        if mechanical_series is None:
            raise SystemExit(
                "Mechanical trace not provided and scenario timeline does not include rotor_angles; provide --mechanical"
            )

    circuit_series: Dict[str, np.ndarray] = {}
    if args.circuit_trace is not None:
        if not args.circuit_trace.exists():
            raise SystemExit(f"Circuit trace '{args.circuit_trace}' not found")
        try:
            circuit_series = load_circuit_trace(args.circuit_trace)
        except Exception as exc:  # pragma: no cover - surfaced to caller
            raise SystemExit(f"Failed to load circuit trace '{args.circuit_trace}': {exc}") from exc

    phase_series = scenario.phase_series if not args.no_timeline_phase else {}

    if args.max_frames is not None and args.max_frames < mechanical_series.times.size:
        mechanical_series = MechanicalSeries(
            times=mechanical_series.times[: args.max_frames],
            angles_rad=mechanical_series.angles_rad[: args.max_frames],
        )

    slot_signals = build_slot_signal(
        scenario.slots,
        mechanical_series.times,
        circuit_series=circuit_series if circuit_series else {},
        phase_series=phase_series,
    )

    gif_path = args.gif_path
    png_path = args.png_path
    if gif_path is None and png_path is None:
        raise SystemExit("Specify at least one of --gif or --frame-png")

    render_animation(
        scenario,
        mechanical_series,
        slot_signals,
        sample_times=mechanical_series.times,
        gif_path=gif_path,
        png_path=png_path,
        fps=args.fps,
        dpi=args.dpi,
        max_frames=args.max_frames,
        figsize=tuple(args.figsize),
    )

    summary_parts = []
    if gif_path is not None:
        summary_parts.append(f"GIF -> {gif_path}")
    if png_path is not None:
        summary_parts.append(f"PNG -> {png_path}")
    print("Rotor animation rendered (" + ", ".join(summary_parts) + ")")


if __name__ == "__main__":
    main()
